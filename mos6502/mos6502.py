
# Addressing modes
ADDR_MODE_ACCUMULATOR   = 0x01
ADDR_MODE_RELATIVE      = 0x02
ADDR_MODE_ABSOLUTE      = 0x03
ADDR_MODE_ABSOLUTE_Y    = 0x04
ADDR_MODE_ABSOLUTE_X    = 0x05
ADDR_MODE_IMMEDIATE     = 0x06
ADDR_MODE_IMPLIED       = 0x07
ADDR_MODE_INDIRECT      = 0x08
ADDR_MODE_INDIRECT_X    = 0x09
ADDR_MODE_INDIRECT_Y    = 0x0A
ADDR_MODE_ZEROPAGE      = 0x0B
ADDR_MODE_ZEROPAGE_X    = 0x0C
ADDR_MODE_ZEROPAGE_Y    = 0x0D

# Instructions
INSTRUCTION_JUMP_JMP        = 0x00
INSTRUCTION_JUMP_JSR        = 0x01
INSTRUCTION_JUMP_RTI        = 0x02
INSTRUCTION_JUMP_RTS        = 0x03
INSTRUCTION_JUMP_PHA        = 0x04
INSTRUCTION_JUMP_PHP        = 0x05
INSTRUCTION_JUMP_PLA        = 0x06
INSTRUCTION_JUMP_PLP        = 0x07
INSTRUCTION_OTHER_BRK       = 0x08
INSTRUCTION_CFLG_CLC        = 0x09
INSTRUCTION_CFLG_CLD        = 0x0A
INSTRUCTION_CFLG_CLI        = 0x0B
INSTRUCTION_CFLG_CLV        = 0x0C
INSTRUCTION_CFLG_SEC        = 0x0D
INSTRUCTION_CFLG_SED        = 0x0E
INSTRUCTION_CFLG_SEI        = 0x0F
INSTRUCTION_ARITH_ADC       = 0x10
INSTRUCTION_ARITH_AND       = 0x11
INSTRUCTION_ARITH_ASL       = 0x12
INSTRUCTION_ARITH_BIT       = 0x13
INSTRUCTION_ARITH_CMP       = 0x14
INSTRUCTION_ARITH_CPX       = 0x15
INSTRUCTION_ARITH_CPY       = 0x16
INSTRUCTION_ARITH_DEC       = 0x17
INSTRUCTION_ARITH_DEX       = 0x18
INSTRUCTION_ARITH_DEY       = 0x19
INSTRUCTION_ARITH_EOR       = 0x1A
INSTRUCTION_ARITH_INC       = 0x1B
INSTRUCTION_ARITH_INX       = 0x1C
INSTRUCTION_ARITH_INY       = 0x1D
INSTRUCTION_ARITH_LSR       = 0x1E
INSTRUCTION_ARITH_ORA       = 0x1F
INSTRUCTION_ARITH_ROL       = 0x20
INSTRUCTION_ARITH_ROR       = 0x21
INSTRUCTION_ARITH_SBC       = 0x22
INSTRUCTION_TRANSFER_LDA    = 0x23
INSTRUCTION_TRANSFER_LDX    = 0x24
INSTRUCTION_TRANSFER_LDY    = 0x25
INSTRUCTION_TRANSFER_STA    = 0x26
INSTRUCTION_TRANSFER_STX    = 0x27
INSTRUCTION_TRANSFER_STY    = 0x28
INSTRUCTION_TRANSFER_TAX    = 0x29
INSTRUCTION_TRANSFER_TAY    = 0x2A
INSTRUCTION_TRANSFER_TSX    = 0x2B
INSTRUCTION_TRANSFER_TXA    = 0x2C
INSTRUCTION_TRANSFER_TXS    = 0x2D
INSTRUCTION_TRANSFER_TYA    = 0x2E
INSTRUCTION_BRANCH_BCC      = 0x2F
INSTRUCTION_BRANCH_BCS      = 0x30
INSTRUCTION_BRANCH_BEQ      = 0x31
INSTRUCTION_BRANCH_BMI      = 0x32
INSTRUCTION_BRANCH_BNE      = 0x33
INSTRUCTION_BRANCH_BPL      = 0x34
INSTRUCTION_BRANCH_BVC      = 0x35
INSTRUCTION_BRANCH_BVS      = 0x36
INSTRUCTION_NOP_NOP         = 0x37


opcodes = [(None, None, 0, 0, "") for _ in range(0x100)]

opcodes[0x4C] = (INSTRUCTION_JUMP_JMP, ADDR_MODE_ABSOLUTE, 3, 3, "JMP")
opcodes[0x6C] = (INSTRUCTION_JUMP_JMP, ADDR_MODE_INDIRECT, 3, 5, "JMP")
opcodes[0x20] = (INSTRUCTION_JUMP_JSR, ADDR_MODE_ABSOLUTE, 3, 6, "JSR")
opcodes[0x40] = (INSTRUCTION_JUMP_RTI, ADDR_MODE_IMPLIED, 1, 6, "RTI")
opcodes[0x60] = (INSTRUCTION_JUMP_RTS, ADDR_MODE_IMPLIED, 1, 6, "RTS")
opcodes[0x48] = (INSTRUCTION_JUMP_PHA, ADDR_MODE_IMPLIED, 1, 3, "PHA")
opcodes[0x08] = (INSTRUCTION_JUMP_PHP, ADDR_MODE_IMPLIED, 1, 3, "PHP")
opcodes[0x68] = (INSTRUCTION_JUMP_PLA, ADDR_MODE_IMPLIED, 1, 4, "PLA")
opcodes[0x28] = (INSTRUCTION_JUMP_PLP, ADDR_MODE_IMPLIED, 1, 4, "PLP")
opcodes[0x00] = (INSTRUCTION_OTHER_BRK, ADDR_MODE_IMPLIED, 1, 7, "BRK")
opcodes[0x18] = (INSTRUCTION_CFLG_CLC, ADDR_MODE_IMPLIED, 1, 2, "CLC")
opcodes[0xD8] = (INSTRUCTION_CFLG_CLD, ADDR_MODE_IMPLIED, 1, 2, "CLD")
opcodes[0x58] = (INSTRUCTION_CFLG_CLI, ADDR_MODE_IMPLIED, 1, 2, "CLI")
opcodes[0xB8] = (INSTRUCTION_CFLG_CLV, ADDR_MODE_IMPLIED, 1, 2, "CLV")
opcodes[0x38] = (INSTRUCTION_CFLG_SEC, ADDR_MODE_IMPLIED, 1, 2, "SEC")
opcodes[0xF8] = (INSTRUCTION_CFLG_SED, ADDR_MODE_IMPLIED, 1, 2, "SED")
opcodes[0x78] = (INSTRUCTION_CFLG_SEI, ADDR_MODE_IMPLIED, 1, 2, "SEI")
opcodes[0x61] = (INSTRUCTION_ARITH_ADC, ADDR_MODE_INDIRECT_X, 2, 6, "ADC")
opcodes[0x65] = (INSTRUCTION_ARITH_ADC, ADDR_MODE_ZEROPAGE, 2, 3, "ADC")
opcodes[0x69] = (INSTRUCTION_ARITH_ADC, ADDR_MODE_IMMEDIATE, 2, 2, "ADC")
opcodes[0x6D] = (INSTRUCTION_ARITH_ADC, ADDR_MODE_ABSOLUTE, 3, 4, "ADC")
opcodes[0x71] = (INSTRUCTION_ARITH_ADC, ADDR_MODE_INDIRECT_Y, 2, 5, "ADC")
opcodes[0x75] = (INSTRUCTION_ARITH_ADC, ADDR_MODE_ZEROPAGE_X, 2, 4, "ADC")
opcodes[0x79] = (INSTRUCTION_ARITH_ADC, ADDR_MODE_ABSOLUTE_Y, 3, 4, "ADC")
opcodes[0x7D] = (INSTRUCTION_ARITH_ADC, ADDR_MODE_ABSOLUTE_X, 3, 4, "ADC")
opcodes[0x21] = (INSTRUCTION_ARITH_AND, ADDR_MODE_INDIRECT_X, 2, 6, "AND")
opcodes[0x25] = (INSTRUCTION_ARITH_AND, ADDR_MODE_ZEROPAGE, 2, 3, "AND")
opcodes[0x29] = (INSTRUCTION_ARITH_AND, ADDR_MODE_IMMEDIATE, 2, 2, "AND")
opcodes[0x2D] = (INSTRUCTION_ARITH_AND, ADDR_MODE_ABSOLUTE, 3, 4, "AND")
opcodes[0x31] = (INSTRUCTION_ARITH_AND, ADDR_MODE_INDIRECT_Y, 2, 5, "AND")
opcodes[0x35] = (INSTRUCTION_ARITH_AND, ADDR_MODE_ZEROPAGE_X, 2, 4, "AND")
opcodes[0x39] = (INSTRUCTION_ARITH_AND, ADDR_MODE_ABSOLUTE_Y, 3, 4, "AND")
opcodes[0x3D] = (INSTRUCTION_ARITH_AND, ADDR_MODE_ABSOLUTE_X, 3, 4, "AND")
opcodes[0x06] = (INSTRUCTION_ARITH_ASL, ADDR_MODE_ZEROPAGE, 2, 5, "ASL")
opcodes[0x0A] = (INSTRUCTION_ARITH_ASL, ADDR_MODE_ACCUMULATOR, 1, 2, "ASL")
opcodes[0x0E] = (INSTRUCTION_ARITH_ASL, ADDR_MODE_ABSOLUTE, 3, 6, "ASL")
opcodes[0x16] = (INSTRUCTION_ARITH_ASL, ADDR_MODE_ZEROPAGE_X, 2, 6, "ASL")
opcodes[0x1E] = (INSTRUCTION_ARITH_ASL, ADDR_MODE_ABSOLUTE_X, 3, 7, "ASL")
opcodes[0x24] = (INSTRUCTION_ARITH_BIT, ADDR_MODE_ZEROPAGE, 2, 3, "BIT")
opcodes[0x2C] = (INSTRUCTION_ARITH_BIT, ADDR_MODE_ABSOLUTE, 3, 4, "BIT")
opcodes[0xC1] = (INSTRUCTION_ARITH_CMP, ADDR_MODE_INDIRECT_X, 2, 6, "CMP")
opcodes[0xC5] = (INSTRUCTION_ARITH_CMP, ADDR_MODE_ZEROPAGE, 2, 3, "CMP")
opcodes[0xC9] = (INSTRUCTION_ARITH_CMP, ADDR_MODE_IMMEDIATE, 2, 2, "CMP")
opcodes[0xCD] = (INSTRUCTION_ARITH_CMP, ADDR_MODE_ABSOLUTE, 3, 4, "CMP")
opcodes[0xD1] = (INSTRUCTION_ARITH_CMP, ADDR_MODE_INDIRECT_Y, 2, 5, "CMP")
opcodes[0xD5] = (INSTRUCTION_ARITH_CMP, ADDR_MODE_ZEROPAGE_X, 2, 4, "CMP")
opcodes[0xD9] = (INSTRUCTION_ARITH_CMP, ADDR_MODE_ABSOLUTE_Y, 3, 4, "CMP")
opcodes[0xDD] = (INSTRUCTION_ARITH_CMP, ADDR_MODE_ABSOLUTE_X, 3, 4, "CMP")
opcodes[0xE0] = (INSTRUCTION_ARITH_CPX, ADDR_MODE_IMMEDIATE, 2, 2, "CPX")
opcodes[0xE4] = (INSTRUCTION_ARITH_CPX, ADDR_MODE_ZEROPAGE, 2, 3, "CPX")
opcodes[0xEC] = (INSTRUCTION_ARITH_CPX, ADDR_MODE_ABSOLUTE, 3, 4, "CPX")
opcodes[0xC0] = (INSTRUCTION_ARITH_CPY, ADDR_MODE_IMMEDIATE, 2, 2, "CPY")
opcodes[0xC4] = (INSTRUCTION_ARITH_CPY, ADDR_MODE_ZEROPAGE, 2, 3, "CPY")
opcodes[0xCC] = (INSTRUCTION_ARITH_CPY, ADDR_MODE_ABSOLUTE, 3, 4, "CPY")
opcodes[0xC6] = (INSTRUCTION_ARITH_DEC, ADDR_MODE_ZEROPAGE, 2, 5, "DEC")
opcodes[0xCE] = (INSTRUCTION_ARITH_DEC, ADDR_MODE_ABSOLUTE, 3, 6, "DEC")
opcodes[0xD6] = (INSTRUCTION_ARITH_DEC, ADDR_MODE_ZEROPAGE_X, 2, 6, "DEC")
opcodes[0xDE] = (INSTRUCTION_ARITH_DEC, ADDR_MODE_ABSOLUTE_X, 3, 7, "DEC")
opcodes[0xCA] = (INSTRUCTION_ARITH_DEX, ADDR_MODE_IMPLIED, 1, 2, "DEX")
opcodes[0x88] = (INSTRUCTION_ARITH_DEY, ADDR_MODE_IMPLIED, 1, 2, "DEY")
opcodes[0x41] = (INSTRUCTION_ARITH_EOR, ADDR_MODE_INDIRECT_X, 2, 6, "EOR")
opcodes[0x45] = (INSTRUCTION_ARITH_EOR, ADDR_MODE_ZEROPAGE, 2, 3, "EOR")
opcodes[0x49] = (INSTRUCTION_ARITH_EOR, ADDR_MODE_IMMEDIATE, 2, 2, "EOR")
opcodes[0x4D] = (INSTRUCTION_ARITH_EOR, ADDR_MODE_ABSOLUTE, 3, 4, "EOR")
opcodes[0x51] = (INSTRUCTION_ARITH_EOR, ADDR_MODE_INDIRECT_Y, 2, 5, "EOR")
opcodes[0x55] = (INSTRUCTION_ARITH_EOR, ADDR_MODE_ZEROPAGE_X, 2, 4, "EOR")
opcodes[0x59] = (INSTRUCTION_ARITH_EOR, ADDR_MODE_ABSOLUTE_Y, 3, 4, "EOR")
opcodes[0x5D] = (INSTRUCTION_ARITH_EOR, ADDR_MODE_ABSOLUTE_X, 3, 4, "EOR")
opcodes[0xE6] = (INSTRUCTION_ARITH_INC, ADDR_MODE_ZEROPAGE, 2, 5, "INC")
opcodes[0xEE] = (INSTRUCTION_ARITH_INC, ADDR_MODE_ABSOLUTE, 3, 6, "INC")
opcodes[0xF6] = (INSTRUCTION_ARITH_INC, ADDR_MODE_ZEROPAGE_X, 2, 6, "INC")
opcodes[0xFE] = (INSTRUCTION_ARITH_INC, ADDR_MODE_ABSOLUTE_X, 3, 7, "INC")
opcodes[0xE8] = (INSTRUCTION_ARITH_INX, ADDR_MODE_IMPLIED, 1, 2, "INX")
opcodes[0xC8] = (INSTRUCTION_ARITH_INY, ADDR_MODE_IMPLIED, 1, 2, "INY")
opcodes[0x46] = (INSTRUCTION_ARITH_LSR, ADDR_MODE_ZEROPAGE, 2, 5, "LSR")
opcodes[0x4A] = (INSTRUCTION_ARITH_LSR, ADDR_MODE_ACCUMULATOR, 1, 2, "LSR")
opcodes[0x4E] = (INSTRUCTION_ARITH_LSR, ADDR_MODE_ABSOLUTE, 3, 6, "LSR")
opcodes[0x56] = (INSTRUCTION_ARITH_LSR, ADDR_MODE_ZEROPAGE_X, 2, 6, "LSR")
opcodes[0x5E] = (INSTRUCTION_ARITH_LSR, ADDR_MODE_ABSOLUTE_X, 3, 7, "LSR")
opcodes[0x01] = (INSTRUCTION_ARITH_ORA, ADDR_MODE_INDIRECT_X, 2, 6, "ORA")
opcodes[0x05] = (INSTRUCTION_ARITH_ORA, ADDR_MODE_ZEROPAGE, 2, 3, "ORA")
opcodes[0x09] = (INSTRUCTION_ARITH_ORA, ADDR_MODE_IMMEDIATE, 2, 2, "ORA")
opcodes[0x0D] = (INSTRUCTION_ARITH_ORA, ADDR_MODE_ABSOLUTE, 3, 4, "ORA")
opcodes[0x11] = (INSTRUCTION_ARITH_ORA, ADDR_MODE_INDIRECT_Y, 2, 5, "ORA")
opcodes[0x15] = (INSTRUCTION_ARITH_ORA, ADDR_MODE_ZEROPAGE_X, 2, 4, "ORA")
opcodes[0x19] = (INSTRUCTION_ARITH_ORA, ADDR_MODE_ABSOLUTE_Y, 3, 4, "ORA")
opcodes[0x1D] = (INSTRUCTION_ARITH_ORA, ADDR_MODE_ABSOLUTE_X, 3, 4, "ORA")
opcodes[0x26] = (INSTRUCTION_ARITH_ROL, ADDR_MODE_ZEROPAGE, 2, 5, "ROL")
opcodes[0x2E] = (INSTRUCTION_ARITH_ROL, ADDR_MODE_ABSOLUTE, 3, 6, "ROL")
opcodes[0x36] = (INSTRUCTION_ARITH_ROL, ADDR_MODE_ZEROPAGE_X, 2, 6, "ROL")
opcodes[0x3E] = (INSTRUCTION_ARITH_ROL, ADDR_MODE_ABSOLUTE_X, 3, 7, "ROL")
opcodes[0x2A] = (INSTRUCTION_ARITH_ROL, ADDR_MODE_ACCUMULATOR, 1, 2, "ROL")
opcodes[0x66] = (INSTRUCTION_ARITH_ROR, ADDR_MODE_ZEROPAGE, 2, 5, "ROR")
opcodes[0x6A] = (INSTRUCTION_ARITH_ROR, ADDR_MODE_ACCUMULATOR, 1, 2, "ROR")
opcodes[0x6E] = (INSTRUCTION_ARITH_ROR, ADDR_MODE_ABSOLUTE, 3, 6, "ROR")
opcodes[0x76] = (INSTRUCTION_ARITH_ROR, ADDR_MODE_ZEROPAGE_X, 2, 6, "ROR")
opcodes[0x7E] = (INSTRUCTION_ARITH_ROR, ADDR_MODE_ABSOLUTE_X, 3, 7, "ROR")
opcodes[0xE1] = (INSTRUCTION_ARITH_SBC, ADDR_MODE_INDIRECT_X, 2, 6, "SBC")
opcodes[0xE5] = (INSTRUCTION_ARITH_SBC, ADDR_MODE_ZEROPAGE, 2, 3, "SBC")
opcodes[0xE9] = (INSTRUCTION_ARITH_SBC, ADDR_MODE_IMMEDIATE, 2, 2, "SBC")
opcodes[0xED] = (INSTRUCTION_ARITH_SBC, ADDR_MODE_ABSOLUTE, 3, 4, "SBC")
opcodes[0xF1] = (INSTRUCTION_ARITH_SBC, ADDR_MODE_INDIRECT_Y, 2, 5, "SBC")
opcodes[0xF5] = (INSTRUCTION_ARITH_SBC, ADDR_MODE_ZEROPAGE_X, 2, 4, "SBC")
opcodes[0xF9] = (INSTRUCTION_ARITH_SBC, ADDR_MODE_ABSOLUTE_Y, 3, 4, "SBC")
opcodes[0xFD] = (INSTRUCTION_ARITH_SBC, ADDR_MODE_ABSOLUTE_X, 3, 4, "SBC")
opcodes[0xA1] = (INSTRUCTION_TRANSFER_LDA, ADDR_MODE_INDIRECT_X, 2, 6, "LDA")
opcodes[0xA5] = (INSTRUCTION_TRANSFER_LDA, ADDR_MODE_ZEROPAGE, 2, 3, "LDA")
opcodes[0xA9] = (INSTRUCTION_TRANSFER_LDA, ADDR_MODE_IMMEDIATE, 2, 2, "LDA")
opcodes[0xAD] = (INSTRUCTION_TRANSFER_LDA, ADDR_MODE_ABSOLUTE, 3, 4, "LDA")
opcodes[0xB1] = (INSTRUCTION_TRANSFER_LDA, ADDR_MODE_INDIRECT_Y, 2, 5, "LDA")
opcodes[0xB5] = (INSTRUCTION_TRANSFER_LDA, ADDR_MODE_ZEROPAGE_X, 2, 4, "LDA")
opcodes[0xB9] = (INSTRUCTION_TRANSFER_LDA, ADDR_MODE_ABSOLUTE_Y, 3, 4, "LDA")
opcodes[0xBD] = (INSTRUCTION_TRANSFER_LDA, ADDR_MODE_ABSOLUTE_X, 3, 4, "LDA")
opcodes[0xA2] = (INSTRUCTION_TRANSFER_LDX, ADDR_MODE_IMMEDIATE, 2, 2, "LDX")
opcodes[0xA6] = (INSTRUCTION_TRANSFER_LDX, ADDR_MODE_ZEROPAGE, 2, 3, "LDX")
opcodes[0xAE] = (INSTRUCTION_TRANSFER_LDX, ADDR_MODE_ABSOLUTE, 3, 4, "LDX")
opcodes[0xB6] = (INSTRUCTION_TRANSFER_LDX, ADDR_MODE_ZEROPAGE_Y, 2, 4, "LDX")
opcodes[0xBE] = (INSTRUCTION_TRANSFER_LDX, ADDR_MODE_ABSOLUTE_Y, 3, 4, "LDX")
opcodes[0xA0] = (INSTRUCTION_TRANSFER_LDY, ADDR_MODE_IMMEDIATE, 2, 2, "LDY")
opcodes[0xA4] = (INSTRUCTION_TRANSFER_LDY, ADDR_MODE_ZEROPAGE, 2, 3, "LDY")
opcodes[0xAC] = (INSTRUCTION_TRANSFER_LDY, ADDR_MODE_ABSOLUTE, 3, 4, "LDY")
opcodes[0xB4] = (INSTRUCTION_TRANSFER_LDY, ADDR_MODE_ZEROPAGE_X, 2, 4, "LDY")
opcodes[0xBC] = (INSTRUCTION_TRANSFER_LDY, ADDR_MODE_ABSOLUTE_X, 3, 4, "LDY")
opcodes[0x81] = (INSTRUCTION_TRANSFER_STA, ADDR_MODE_INDIRECT_X, 2, 6, "STA")
opcodes[0x85] = (INSTRUCTION_TRANSFER_STA, ADDR_MODE_ZEROPAGE, 2, 3, "STA")
opcodes[0x8D] = (INSTRUCTION_TRANSFER_STA, ADDR_MODE_ABSOLUTE, 3, 4, "STA")
opcodes[0x91] = (INSTRUCTION_TRANSFER_STA, ADDR_MODE_INDIRECT_Y, 2, 6, "STA")
opcodes[0x95] = (INSTRUCTION_TRANSFER_STA, ADDR_MODE_ZEROPAGE_X, 2, 4, "STA")
opcodes[0x99] = (INSTRUCTION_TRANSFER_STA, ADDR_MODE_ABSOLUTE_Y, 3, 5, "STA")
opcodes[0x9D] = (INSTRUCTION_TRANSFER_STA, ADDR_MODE_ABSOLUTE_X, 3, 5, "STA")
opcodes[0x86] = (INSTRUCTION_TRANSFER_STX, ADDR_MODE_ZEROPAGE, 2, 3, "STX")
opcodes[0x8E] = (INSTRUCTION_TRANSFER_STX, ADDR_MODE_ABSOLUTE, 3, 4, "STX")
opcodes[0x96] = (INSTRUCTION_TRANSFER_STX, ADDR_MODE_ZEROPAGE_Y, 2, 4, "STX")
opcodes[0x84] = (INSTRUCTION_TRANSFER_STY, ADDR_MODE_ZEROPAGE, 2, 3, "STY")
opcodes[0x8C] = (INSTRUCTION_TRANSFER_STY, ADDR_MODE_ABSOLUTE, 3, 4, "STY")
opcodes[0x94] = (INSTRUCTION_TRANSFER_STY, ADDR_MODE_ZEROPAGE_X, 2, 4, "STY")
opcodes[0xAA] = (INSTRUCTION_TRANSFER_TAX, ADDR_MODE_IMPLIED, 1, 2, "TAX")
opcodes[0xA8] = (INSTRUCTION_TRANSFER_TAY, ADDR_MODE_IMPLIED, 1, 2, "TAY")
opcodes[0xBA] = (INSTRUCTION_TRANSFER_TSX, ADDR_MODE_IMPLIED, 1, 2, "TSX")
opcodes[0x8A] = (INSTRUCTION_TRANSFER_TXA, ADDR_MODE_IMPLIED, 1, 2, "TXA")
opcodes[0x9A] = (INSTRUCTION_TRANSFER_TXS, ADDR_MODE_IMPLIED, 1, 2, "TXS")
opcodes[0x98] = (INSTRUCTION_TRANSFER_TYA, ADDR_MODE_IMPLIED, 1, 2, "TYA")
opcodes[0x90] = (INSTRUCTION_BRANCH_BCC, ADDR_MODE_RELATIVE, 2, 2, "BCC")
opcodes[0xB0] = (INSTRUCTION_BRANCH_BCS, ADDR_MODE_RELATIVE, 2, 2, "BCS")
opcodes[0xF0] = (INSTRUCTION_BRANCH_BEQ, ADDR_MODE_RELATIVE, 2, 2, "BEQ")
opcodes[0x30] = (INSTRUCTION_BRANCH_BMI, ADDR_MODE_RELATIVE, 2, 2, "BMI")
opcodes[0xD0] = (INSTRUCTION_BRANCH_BNE, ADDR_MODE_RELATIVE, 2, 2, "BNE")
opcodes[0x10] = (INSTRUCTION_BRANCH_BPL, ADDR_MODE_RELATIVE, 2, 2, "BPL")
opcodes[0x50] = (INSTRUCTION_BRANCH_BVC, ADDR_MODE_RELATIVE, 2, 2, "BVC")
opcodes[0x70] = (INSTRUCTION_BRANCH_BVS, ADDR_MODE_RELATIVE, 2, 2, "BVS")
opcodes[0xEA] = (INSTRUCTION_NOP_NOP, ADDR_MODE_IMPLIED, 1, 2, "NOP")

class MOS6502MPU(object):
    def __init__(self):
        # Init registers
        self._A  = 0x00
        self._X  = 0x00
        self._Y  = 0x00
        self._S  = 0x00
        self._P  = 0x00
        self._PC = 0x0000

        self.reset()


    def reset(self):
        # Init registers
        self.A  = 0x00
        self.X  = 0x00
        self.Y  = 0x00
        self.S  = 0x00
        self.P  = 0x00
        self.PC = 0x0000


    def cycle(self):
        pass


    def _decode(self):
        pass




    def _set_flag_register_from_acc(self, value):
        c = int(value > 0xFF)
        z = value & 0xFF
        n = value & 0x80
        self._set_flag_register(n, 0, 0, 0, 0, 0, z, c)



    @property
    def A(self):
        return self._A

    @A.setter
    def A(self, value):
        self._A = value & 0xFF

    @property
    def X(self):
        return self._X

    @X.setter
    def X(self, value):
        self._X = value & 0xFF

    @property
    def Y(self):
        return self._Y

    @Y.setter
    def Y(self, value):
        self._Y = value & 0xFF

    @property
    def S(self):
        return self._S

    @S.setter
    def S(self, value):
        self._S = value & 0xFF

    @property
    def P(self):
        return self._P

    def _set_flag_register(self, n=0, v=0, r=0, b=0, d=0, i=0, z=0, c=0):
        p_buf = 0x00
        p_buf += int(bool(n)) << 7
        p_buf += int(bool(v)) << 6
        p_buf += int(bool(r)) << 5
        p_buf += int(bool(b)) << 4
        p_buf += int(bool(d)) << 3
        p_buf += int(bool(i)) << 2
        p_buf += int(bool(z)) << 1
        p_buf += int(bool(c)) << 0
        self._P = p_buf

    @property
    def PC(self):
        return self._PC

    @PC.setter
    def PC(self, value):
        self._PC = value & 0xFFFF
